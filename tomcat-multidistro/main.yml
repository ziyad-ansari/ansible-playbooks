- name: installing tomcat for multi-distributions
  hosts: all
  become: yes         
  tasks:
    - name: installing jdk-11
      ansible.builtin.package:
        name: "{{ java_package_name }}"
        state: present
    - name: create group
      ansible.builtin.group:
        name: "{{ group_name }}"
        state: present
    - name: create user
      ansible.builtin.user:
        create_home: yes
        group: "{{ group_name }}"
        home: "{{ user_home }}"
        name: "{{ user_name }}"
        shell: "{{ shell }}"
        state: present
    - name: adding stat
      ansible.builtin.stat:
        path: "{{ user_home }}/latest/bin/startup.sh"
      register: tomcat_startup
    - name: downloading tomcat
      ansible.builtin.unarchive:
        src: "https://www-eu.apache.org/dist/tomcat/tomcat-{{ tomcat_major_version }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz" 
        dest: "{{ user_home }}"
        remote_src: true
        group: "{{ group_name }}"
      when: not tomcat_startup.stat.exists
    - name: add links
      ansible.builtin.file:
        src: "{{ user_home }}/apache-tomcat-{{ tomcat_version }}"
        path: "{{ user_home }}/latest"
        state: link
    - name: change ownership
      ansible.builtin.file:
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
        path: "{{ user_home }}"
        recurse: true
        state: directory
    - name: finding shell files
      ansible.builtin.find:
        file_type: file
        paths: "{{ user_home }}/latest/bin"
        patterns: '*.sh'
      register: output
    - name: changing permissions
      ansible.builtin.file:
        path: "{{ item.path }}"
        mode: '721'
        state: file
      with_items: "{{ output.files }}"
    - name: executing shell files
      ansible.builtin.command: "sudo sh {{ user_home }}/latest/bin/'*.sh'"
    - name: creating system D unit file
      ansible.builtin.copy:
        src: ubuntu.tomcat.service
        dest: "/etc/systemd/system/{{ service_name }}"
        group: "{{ user_name }}"
        owner: "{{ group_name }}"
      when: ansible_facts['distribution'] == "Ubuntu"
      notify:
      - enable and reload tomcat
    - name: creating system D unit file
      ansible.builtin.copy:
        src: centos.tomcat.service
        dest: "/etc/systemd/system/{{ service_name }}"
        group: "{{ user_name }}"
        owner: "{{ group_name }}"
      when: ansible_facts['distribution'] == "CentOS"
      notify:
      - enable and reload tomcat
    - name: changing in tomcat-users.xml
      ansible.builtin.copy:
        src: tomcat-users.xml
        dest: "{{ user_home }}/latest/conf/tomcat-users.xml"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      notify:
        - restart tomcat
    - name: change in context file
      ansible.builtin.copy:
        src: context.xml
        dest: "{{ item }}"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      loop:
        - "{{ user_home }}/latest/webapps/manager/META-INF/context.xml"
        - "{{ user_home }}/latest/webapps/host-manager/META-INF/context.xml"
      notify:
        - restart tomcat
    - name: starting tomcat service
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        state: started
  handlers:
    - name: restart tomcat
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        state: restarted
    - name: enable and reload tomcat
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        daemon_reload: true
        state: reloaded
    
